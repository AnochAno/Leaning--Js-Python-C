
3digit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000152  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000862  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000733  00000000  00000000  00000ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d0  00000000  00000000  00001205  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000014d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e3  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f9  00000000  00000000  0000190f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 83 00 	call	0x106	; 0x106 <main>
  8e:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init_ssd>:
#define SSD_SEGMENT_PORT PORTC
#define SSD_SEGMENT_DDR DDRC

void init_ssd() {
	
	SSD_SEGMENT_DDR = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << SSD1_CATHODE_PIN) | (1 << SSD2_CATHODE_PIN) | (1 << SSD3_CATHODE_PIN);
  9a:	8a b1       	in	r24, 0x0a	; 10
  9c:	87 60       	ori	r24, 0x07	; 7
  9e:	8a b9       	out	0x0a, r24	; 10
  a0:	08 95       	ret

000000a2 <displayDigit>:
}

void displayDigit(unsigned int digit, uint8_t ssd_cathode) {
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	2a 97       	sbiw	r28, 0x0a	; 10
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
	
	char seg[] = {0b0111111, 0b00000110, 0b1011011, 0b1001111, 0b1100110, 0b1101101, 0b1111101, 0b0000111, 0b1111111, 0b1101111};
  b6:	2a e0       	ldi	r18, 0x0A	; 10
  b8:	e0 e0       	ldi	r30, 0x00	; 0
  ba:	f1 e0       	ldi	r31, 0x01	; 1
  bc:	de 01       	movw	r26, r28
  be:	11 96       	adiw	r26, 0x01	; 1
  c0:	01 90       	ld	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	2a 95       	dec	r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <displayDigit+0x1e>

	
	PORTD &= ~((1 << SSD1_CATHODE_PIN) | (1 << SSD2_CATHODE_PIN) | (1 << SSD3_CATHODE_PIN));
  c8:	2b b1       	in	r18, 0x0b	; 11
  ca:	28 7f       	andi	r18, 0xF8	; 248
  cc:	2b b9       	out	0x0b, r18	; 11

	
	PORTD |= (1 << ssd_cathode);
  ce:	4b b1       	in	r20, 0x0b	; 11
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <displayDigit+0x38>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <displayDigit+0x34>
  de:	24 2b       	or	r18, r20
  e0:	2b b9       	out	0x0b, r18	; 11

	SSD_SEGMENT_PORT = seg[digit];
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	2c 0f       	add	r18, r28
  e8:	3d 1f       	adc	r19, r29
  ea:	82 0f       	add	r24, r18
  ec:	93 1f       	adc	r25, r19
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	88 b9       	out	0x08, r24	; 8
}
  f4:	2a 96       	adiw	r28, 0x0a	; 10
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <main>:

int main(void) {
	init_ssd(); 
 106:	0e 94 4b 00 	call	0x96	; 0x96 <init_ssd>

	while (1) {
		unsigned int number = 945;

		
		displayDigit(number % 10, SSD1_CATHODE_PIN);
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	85 e0       	ldi	r24, 0x05	; 5
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 51 00 	call	0xa2	; 0xa2 <displayDigit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	8f e0       	ldi	r24, 0x0F	; 15
 116:	97 e2       	ldi	r25, 0x27	; 39
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x12>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x18>
 11e:	00 00       	nop
		_delay_ms(5);

		displayDigit((number / 10) % 10, SSD2_CATHODE_PIN);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 51 00 	call	0xa2	; 0xa2 <displayDigit>
 12a:	8f e0       	ldi	r24, 0x0F	; 15
 12c:	97 e2       	ldi	r25, 0x27	; 39
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x28>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x2e>
 134:	00 00       	nop
		_delay_ms(5);

		displayDigit(number / 100, SSD3_CATHODE_PIN);
 136:	62 e0       	ldi	r22, 0x02	; 2
 138:	89 e0       	ldi	r24, 0x09	; 9
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 51 00 	call	0xa2	; 0xa2 <displayDigit>
 140:	8f e0       	ldi	r24, 0x0F	; 15
 142:	97 e2       	ldi	r25, 0x27	; 39
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0x3e>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x44>
 14a:	00 00       	nop
 14c:	de cf       	rjmp	.-68     	; 0x10a <main+0x4>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
