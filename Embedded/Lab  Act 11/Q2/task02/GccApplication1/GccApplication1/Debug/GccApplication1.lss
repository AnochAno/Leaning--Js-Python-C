
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000016e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000805  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000709  00000000  00000000  00000aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000315  00000000  00000000  000011aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000415  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013d  00000000  00000000  00001949  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 82 00 	call	0x104	; 0x104 <main>
  8e:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <displaySSD>:
#include <avr/io.h>
#include <util/delay.h>

#define BUTTON_PIN PD2 // Assume the push button is connected to PD2

void displaySSD(unsigned int num) {
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2a 97       	sbiw	r28, 0x0a	; 10
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	// Define segment values for common cathode 7-segment display
	char seg[] = {0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B};
  aa:	2a e0       	ldi	r18, 0x0A	; 10
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	2a 95       	dec	r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <displaySSD+0x1e>
	PORTC = seg[num];
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	2c 0f       	add	r18, r28
  c2:	3d 1f       	adc	r19, r29
  c4:	82 0f       	add	r24, r18
  c6:	93 1f       	adc	r25, r19
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	88 b9       	out	0x08, r24	; 8
}
  ce:	2a 96       	adiw	r28, 0x0a	; 10
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	cd bf       	out	0x3d, r28	; 61
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <init_ssd>:

void init_ssd() {
	DDRC = 0xFF; // Set all PORTC pins as output
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	87 b9       	out	0x07, r24	; 7
  e4:	08 95       	ret

000000e6 <init_button>:
}

void init_button() {
	// Set the BUTTON_PIN as input and enable internal pull-up resistor
	DDRD &= ~(1 << BUTTON_PIN);
  e6:	8a b1       	in	r24, 0x0a	; 10
  e8:	8b 7f       	andi	r24, 0xFB	; 251
  ea:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << BUTTON_PIN);
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	08 95       	ret

000000f4 <is_button_pressed>:
}

int is_button_pressed() {
	// Check if the button is pressed (LOW)
	return bit_is_clear(PIND, BUTTON_PIN);
  f4:	89 b1       	in	r24, 0x09	; 9
  f6:	86 95       	lsr	r24
  f8:	86 95       	lsr	r24
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	89 27       	eor	r24, r25
}
  fe:	81 70       	andi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	08 95       	ret

00000104 <main>:

int main(void) {
	init_ssd(); // Call init_ssd function
 104:	0e 94 70 00 	call	0xe0	; 0xe0 <init_ssd>
	init_button(); // Call init_button function
 108:	0e 94 73 00 	call	0xe6	; 0xe6 <init_button>

	unsigned int counter = 0;
	int button_state = 0; // 0: button not pressed, 1: button pressed
 10c:	00 e0       	ldi	r16, 0x00	; 0
 10e:	10 e0       	ldi	r17, 0x00	; 0

int main(void) {
	init_ssd(); // Call init_ssd function
	init_button(); // Call init_button function

	unsigned int counter = 0;
 110:	c0 e0       	ldi	r28, 0x00	; 0
 112:	d0 e0       	ldi	r29, 0x00	; 0
	int button_state = 0; // 0: button not pressed, 1: button pressed

	while (1) {
		if (is_button_pressed() && !button_state) {
 114:	0e 94 7a 00 	call	0xf4	; 0xf4 <is_button_pressed>
 118:	89 2b       	or	r24, r25
 11a:	a1 f0       	breq	.+40     	; 0x144 <main+0x40>
 11c:	01 15       	cp	r16, r1
 11e:	11 05       	cpc	r17, r1
 120:	89 f4       	brne	.+34     	; 0x144 <main+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	8f e3       	ldi	r24, 0x3F	; 63
 124:	9c e9       	ldi	r25, 0x9C	; 156
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x22>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x28>
 12c:	00 00       	nop
			// Button is pressed and it was not pressed in the previous loop
			_delay_ms(20); // Introduce a delay to handle button bouncing
			if (is_button_pressed()) {
 12e:	0e 94 7a 00 	call	0xf4	; 0xf4 <is_button_pressed>
 132:	89 2b       	or	r24, r25
 134:	61 f0       	breq	.+24     	; 0x14e <main+0x4a>
				// Increment counter only if the button is still pressed after the delay
				counter++;
 136:	21 96       	adiw	r28, 0x01	; 1
				if (counter == 10) {
 138:	ca 30       	cpi	r28, 0x0A	; 10
 13a:	d1 05       	cpc	r29, r1
 13c:	59 f0       	breq	.+22     	; 0x154 <main+0x50>
					counter = 0; // Reset counter when it reaches 10
				}
			}
			button_state = 1; // Update button state to indicate it's pressed
 13e:	01 e0       	ldi	r16, 0x01	; 1
 140:	10 e0       	ldi	r17, 0x00	; 0
 142:	0f c0       	rjmp	.+30     	; 0x162 <main+0x5e>
			} else if (!is_button_pressed()) {
 144:	0e 94 7a 00 	call	0xf4	; 0xf4 <is_button_pressed>
 148:	89 2b       	or	r24, r25
 14a:	49 f0       	breq	.+18     	; 0x15e <main+0x5a>
 14c:	0a c0       	rjmp	.+20     	; 0x162 <main+0x5e>
				counter++;
				if (counter == 10) {
					counter = 0; // Reset counter when it reaches 10
				}
			}
			button_state = 1; // Update button state to indicate it's pressed
 14e:	01 e0       	ldi	r16, 0x01	; 1
 150:	10 e0       	ldi	r17, 0x00	; 0
 152:	07 c0       	rjmp	.+14     	; 0x162 <main+0x5e>
 154:	01 e0       	ldi	r16, 0x01	; 1
 156:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(20); // Introduce a delay to handle button bouncing
			if (is_button_pressed()) {
				// Increment counter only if the button is still pressed after the delay
				counter++;
				if (counter == 10) {
					counter = 0; // Reset counter when it reaches 10
 158:	c0 e0       	ldi	r28, 0x00	; 0
 15a:	d0 e0       	ldi	r29, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <main+0x5e>
				}
			}
			button_state = 1; // Update button state to indicate it's pressed
			} else if (!is_button_pressed()) {
			button_state = 0; // Update button state to indicate it's not pressed
 15e:	00 e0       	ldi	r16, 0x00	; 0
 160:	10 e0       	ldi	r17, 0x00	; 0
		}

		displaySSD(counter); // Display the counter value on the SSD
 162:	ce 01       	movw	r24, r28
 164:	0e 94 4b 00 	call	0x96	; 0x96 <displaySSD>
	}
 168:	d5 cf       	rjmp	.-86     	; 0x114 <main+0x10>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
