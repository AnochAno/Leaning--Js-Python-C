
Sevensegment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000016a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007aa  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f1  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029b  00000000  00000000  00001123  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b0  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d9  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000189d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  8e:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <displaySSD>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>

void displaySSD(unsigned int num) {
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2a 97       	sbiw	r28, 0x0a	; 10
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	// Define segment values for common cathode 7-segment display
	char seg[] = {0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B};
  aa:	2a e0       	ldi	r18, 0x0A	; 10
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	2a 95       	dec	r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <displaySSD+0x1e>
	PORTC = seg[num];
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	2c 0f       	add	r18, r28
  c2:	3d 1f       	adc	r19, r29
  c4:	82 0f       	add	r24, r18
  c6:	93 1f       	adc	r25, r19
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	88 b9       	out	0x08, r24	; 8
}
  ce:	2a 96       	adiw	r28, 0x0a	; 10
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	cd bf       	out	0x3d, r28	; 61
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <init_ssd>:

void init_ssd() {
	DDRC = 0xFF; // Set all PORTC pins as output
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	87 b9       	out	0x07, r24	; 7
  e4:	08 95       	ret

000000e6 <main>:
}

int main(void) {
	init_ssd(); // Call init_ssd function
  e6:	0e 94 70 00 	call	0xe0	; 0xe0 <init_ssd>

	unsigned int counter = 0;
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	d0 e0       	ldi	r29, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <main+0xe>
		displaySSD(counter % 10); // Display the least significant digit of the counter
		_delay_ms(1000); // Delay to prevent ghosting
		counter++;

		if (counter == 10) {
			counter = 0; // Reset counter when it reaches 10
  f0:	c0 e0       	ldi	r28, 0x00	; 0
  f2:	d0 e0       	ldi	r29, 0x00	; 0
	init_ssd(); // Call init_ssd function

	unsigned int counter = 0;

	while (1) {
		displaySSD(counter % 10); // Display the least significant digit of the counter
  f4:	9e 01       	movw	r18, r28
  f6:	ad ec       	ldi	r26, 0xCD	; 205
  f8:	bc ec       	ldi	r27, 0xCC	; 204
  fa:	0e 94 a4 00 	call	0x148	; 0x148 <__umulhisi3>
  fe:	96 95       	lsr	r25
 100:	87 95       	ror	r24
 102:	96 95       	lsr	r25
 104:	87 95       	ror	r24
 106:	96 95       	lsr	r25
 108:	87 95       	ror	r24
 10a:	9c 01       	movw	r18, r24
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	82 0f       	add	r24, r18
 11e:	93 1f       	adc	r25, r19
 120:	9e 01       	movw	r18, r28
 122:	28 1b       	sub	r18, r24
 124:	39 0b       	sbc	r19, r25
 126:	c9 01       	movw	r24, r18
 128:	0e 94 4b 00 	call	0x96	; 0x96 <displaySSD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	3f ef       	ldi	r19, 0xFF	; 255
 12e:	89 e6       	ldi	r24, 0x69	; 105
 130:	98 e1       	ldi	r25, 0x18	; 24
 132:	31 50       	subi	r19, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x4c>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x56>
 13c:	00 00       	nop
		_delay_ms(1000); // Delay to prevent ghosting
		counter++;
 13e:	21 96       	adiw	r28, 0x01	; 1

		if (counter == 10) {
 140:	ca 30       	cpi	r28, 0x0A	; 10
 142:	d1 05       	cpc	r29, r1
 144:	b9 f6       	brne	.-82     	; 0xf4 <main+0xe>
 146:	d4 cf       	rjmp	.-88     	; 0xf0 <main+0xa>

00000148 <__umulhisi3>:
 148:	a2 9f       	mul	r26, r18
 14a:	b0 01       	movw	r22, r0
 14c:	b3 9f       	mul	r27, r19
 14e:	c0 01       	movw	r24, r0
 150:	a3 9f       	mul	r26, r19
 152:	70 0d       	add	r23, r0
 154:	81 1d       	adc	r24, r1
 156:	11 24       	eor	r1, r1
 158:	91 1d       	adc	r25, r1
 15a:	b2 9f       	mul	r27, r18
 15c:	70 0d       	add	r23, r0
 15e:	81 1d       	adc	r24, r1
 160:	11 24       	eor	r1, r1
 162:	91 1d       	adc	r25, r1
 164:	08 95       	ret

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
