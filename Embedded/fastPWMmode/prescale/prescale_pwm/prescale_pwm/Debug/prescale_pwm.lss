
prescale_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000789  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a8  00000000  00000000  00000959  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c2  00000000  00000000  00001001  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003be  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  000016b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000176a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <pwm_init>:
#define F_CPU 20000000UL
#include <avr/io.h>
#include <util/delay.h> 

void pwm_init(){ 
	TCCR0A |= (1<<WGM00)|(1<<WGM01)|(1<<COM0A1);
  80:	84 b5       	in	r24, 0x24	; 36
  82:	83 68       	ori	r24, 0x83	; 131
  84:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);
  86:	85 b5       	in	r24, 0x25	; 37
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	85 bd       	out	0x25, r24	; 37
	DDRD |= (1<<DDD6);
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	8a b9       	out	0x0a, r24	; 10
  92:	08 95       	ret

00000094 <main>:
}

int main(void){
	pwm_init(); 
  94:	0e 94 40 00 	call	0x80	; 0x80 <pwm_init>
	
	while(1){
		for(int i =0; i<255; i++){
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0b c0       	rjmp	.+22     	; 0xb4 <main+0x20>
			OCR0A = i;
  9e:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	30 e7       	ldi	r19, 0x70	; 112
  a4:	42 e0       	ldi	r20, 0x02	; 2
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	30 40       	sbci	r19, 0x00	; 0
  aa:	40 40       	sbci	r20, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x12>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x1c>
  b0:	00 00       	nop

int main(void){
	pwm_init(); 
	
	while(1){
		for(int i =0; i<255; i++){
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	8f 3f       	cpi	r24, 0xFF	; 255
  b6:	91 05       	cpc	r25, r1
  b8:	94 f3       	brlt	.-28     	; 0x9e <main+0xa>
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0b c0       	rjmp	.+22     	; 0xd6 <main+0x42>
			OCR0A = i;
			_delay_ms(40);
		}
		for(int i=255; i>0; i--)
		{
			OCR0A = i;
  c0:	87 bd       	out	0x27, r24	; 39
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	30 e7       	ldi	r19, 0x70	; 112
  c6:	42 e0       	ldi	r20, 0x02	; 2
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	30 40       	sbci	r19, 0x00	; 0
  cc:	40 40       	sbci	r20, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x34>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x3e>
  d2:	00 00       	nop
	while(1){
		for(int i =0; i<255; i++){
			OCR0A = i;
			_delay_ms(40);
		}
		for(int i=255; i>0; i--)
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	18 16       	cp	r1, r24
  d8:	19 06       	cpc	r1, r25
  da:	94 f3       	brlt	.-28     	; 0xc0 <main+0x2c>
  dc:	dd cf       	rjmp	.-70     	; 0x98 <main+0x4>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
