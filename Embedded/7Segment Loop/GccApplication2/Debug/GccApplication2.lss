
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001a2  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000828  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000724  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e2  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000014fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dd  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000109  00000000  00000000  0000194d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  8e:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <displaySSD>:
#include <avr/io.h>
#include <util/delay.h>

#define BUTTON_PIN PD2 // Assuming the button is connected to PD2

void displaySSD(unsigned int num) {
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2a 97       	sbiw	r28, 0x0a	; 10
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	// Define segment values for common cathode 7-segment display
	char seg[] = {0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B};
  aa:	2a e0       	ldi	r18, 0x0A	; 10
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	2a 95       	dec	r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <displaySSD+0x1e>
	PORTC = seg[num];
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	2c 0f       	add	r18, r28
  c2:	3d 1f       	adc	r19, r29
  c4:	82 0f       	add	r24, r18
  c6:	93 1f       	adc	r25, r19
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	88 b9       	out	0x08, r24	; 8
}
  ce:	2a 96       	adiw	r28, 0x0a	; 10
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	cd bf       	out	0x3d, r28	; 61
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <init_ssd>:

void init_ssd() {
	DDRC = 0xFF; // Set all PORTC pins as output
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	87 b9       	out	0x07, r24	; 7
  e4:	08 95       	ret

000000e6 <init_button>:
}

void init_button() {
	// Set BUTTON_PIN as input with pull-up resistor
	PORTD |= (1 << BUTTON_PIN);
  e6:	8b b1       	in	r24, 0x0b	; 11
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	8b b9       	out	0x0b, r24	; 11
  ec:	08 95       	ret

000000ee <is_button_pressed>:
}

int is_button_pressed() {
	// Check if the button is pressed (LOW)
	return bit_is_clear(PIND, BUTTON_PIN);
  ee:	89 b1       	in	r24, 0x09	; 9
  f0:	86 95       	lsr	r24
  f2:	86 95       	lsr	r24
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	89 27       	eor	r24, r25
}
  f8:	81 70       	andi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	08 95       	ret

000000fe <main>:

int main(void) {
	init_ssd(); // Call init_ssd function
  fe:	0e 94 70 00 	call	0xe0	; 0xe0 <init_ssd>
	init_button(); // Call init_button function
 102:	0e 94 73 00 	call	0xe6	; 0xe6 <init_button>

	unsigned int counter = 0;
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	d0 e0       	ldi	r29, 0x00	; 0

	while (1) {
		if (is_button_pressed()) {
 10a:	0e 94 77 00 	call	0xee	; 0xee <is_button_pressed>
 10e:	89 2b       	or	r24, r25
 110:	e1 f3       	breq	.-8      	; 0x10a <main+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	2f e7       	ldi	r18, 0x7F	; 127
 114:	88 e3       	ldi	r24, 0x38	; 56
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x1a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x24>
 122:	00 00       	nop
			// Button is pressed, increment the counter
			_delay_ms(50); // Introduce a delay to handle button bouncing
			if (is_button_pressed()) {
 124:	0e 94 77 00 	call	0xee	; 0xee <is_button_pressed>
 128:	89 2b       	or	r24, r25
 12a:	79 f3       	breq	.-34     	; 0x10a <main+0xc>
				counter++;
 12c:	ae 01       	movw	r20, r28
 12e:	4f 5f       	subi	r20, 0xFF	; 255
 130:	5f 4f       	sbci	r21, 0xFF	; 255
				counter %= 10; // Limit the counter to a single digit
 132:	9a 01       	movw	r18, r20
 134:	ad ec       	ldi	r26, 0xCD	; 205
 136:	bc ec       	ldi	r27, 0xCC	; 204
 138:	0e 94 c0 00 	call	0x180	; 0x180 <__umulhisi3>
 13c:	ec 01       	movw	r28, r24
 13e:	d6 95       	lsr	r29
 140:	c7 95       	ror	r28
 142:	d6 95       	lsr	r29
 144:	c7 95       	ror	r28
 146:	d6 95       	lsr	r29
 148:	c7 95       	ror	r28
 14a:	ce 01       	movw	r24, r28
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	cc 0f       	add	r28, r28
 152:	dd 1f       	adc	r29, r29
 154:	cc 0f       	add	r28, r28
 156:	dd 1f       	adc	r29, r29
 158:	cc 0f       	add	r28, r28
 15a:	dd 1f       	adc	r29, r29
 15c:	c8 0f       	add	r28, r24
 15e:	d9 1f       	adc	r29, r25
 160:	ca 01       	movw	r24, r20
 162:	8c 1b       	sub	r24, r28
 164:	9d 0b       	sbc	r25, r29
 166:	ec 01       	movw	r28, r24
				displaySSD(counter);
 168:	0e 94 4b 00 	call	0x96	; 0x96 <displaySSD>
 16c:	9f ef       	ldi	r25, 0xFF	; 255
 16e:	29 e6       	ldi	r18, 0x69	; 105
 170:	88 e1       	ldi	r24, 0x18	; 24
 172:	91 50       	subi	r25, 0x01	; 1
 174:	20 40       	sbci	r18, 0x00	; 0
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0x74>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x7e>
 17c:	00 00       	nop
 17e:	c5 cf       	rjmp	.-118    	; 0x10a <main+0xc>

00000180 <__umulhisi3>:
 180:	a2 9f       	mul	r26, r18
 182:	b0 01       	movw	r22, r0
 184:	b3 9f       	mul	r27, r19
 186:	c0 01       	movw	r24, r0
 188:	a3 9f       	mul	r26, r19
 18a:	70 0d       	add	r23, r0
 18c:	81 1d       	adc	r24, r1
 18e:	11 24       	eor	r1, r1
 190:	91 1d       	adc	r25, r1
 192:	b2 9f       	mul	r27, r18
 194:	70 0d       	add	r23, r0
 196:	81 1d       	adc	r24, r1
 198:	11 24       	eor	r1, r1
 19a:	91 1d       	adc	r25, r1
 19c:	08 95       	ret

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
